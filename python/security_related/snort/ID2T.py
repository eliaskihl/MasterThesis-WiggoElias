import pandas as pd    
import os
import xml.etree.ElementTree as ET
from datetime import datetime
import subprocess
from datetime import datetime

def process_snort_logs_ID2T(): 
    pd.set_option('future.no_silent_downcasting', True)

    log_file = './logs/alert_csv.txt'
    if not os.path.exists(log_file):
        print(f"No alerts generated by snort")
        return(0,0,0,0,True)
    
    column_names = ["timestamp", "pkt_num", "proto", "pkt_gen", "pkt_len", "dir", "src_ap", "dst_ap", "rule", "action", "msg", "class", "start_time"]

    # Load the Snort alert CSV file
    df_snort = pd.read_csv(log_file, names=column_names, header=None)
    
    # Split 'src_ap' and 'dst_ap' into IP and Port (specific to snort)
    df_snort[['src_ip', 'src_port']] = df_snort['src_ap'].str.split(':', n=1, expand=True)
    df_snort[['dest_ip', 'dest_port']] = df_snort['dst_ap'].str.split(':', n=1, expand=True)
    df_snort['src_ip'] = df_snort['src_ip'].str.strip()
    df_snort['dest_ip'] = df_snort['dest_ip'].str.strip()
    df_snort['proto'] = df_snort['proto'].str.strip().str.lower()
    
    # Rename 'action' to 'flow_alerted' and set it to True
    df_snort.rename(columns={'action': 'flow_alerted'}, inplace=True)
    df_snort['flow_alerted'] = True  # Set all values in flow_alerted to True

    # Convert ports to integers for consistency
    df_snort['src_port'] = pd.to_numeric(df_snort['src_port'], errors='coerce').astype("Int64")
    df_snort['dest_port'] = pd.to_numeric(df_snort['dest_port'], errors='coerce').astype("Int64")

    # Keep only the necessary columns
    df_snort = df_snort[['src_ip', 'src_port', 'dest_ip', 'dest_port', 'proto', 'start_time', 'flow_alerted']]

    # Drop duplicates to get alerts for flows instead of individual packets
    df_snort = df_snort.drop_duplicates(subset=["src_ip", "src_port", "dest_ip", "dest_port", "proto", "start_time"])

# This part prepares the ground truth based on the output of ID2T and flows taken from zeek's conn.log
    xml_file = '../traffic_generators/ID2T/output/smallFlows_output_labels.xml'
    tree = ET.parse(xml_file)
    root = tree.getroot()

    timestamp_start_str = root.find('.//timestamp_start/timestamp_hr').text
    timestamp_end_str = root.find('.//timestamp_end/timestamp_hr').text
    timestamp_start = int(datetime.strptime(timestamp_start_str.split('.')[0], '%Y-%m-%d %H:%M:%S').timestamp() + 3600)
    timestamp_end = int(datetime.strptime(timestamp_end_str.split('.')[0], '%Y-%m-%d %H:%M:%S').timestamp()+ 3600)

    temp = open(f"./tmp/temp.log", "w")
    err = open(f"./tmp/err.log", "w")
    id2t_pcap = 'traffic_generators/ID2T/output/smallFlows_output.pcap'
    cmd = [
        "sudo", 
        "docker", 
        "exec", 
        "zeek-container", 
        "bash", 
        "-c",
        f"cd logs && zeek -C -r ../{id2t_pcap} ../usr/local/zeek/share/zeek/base/protocols/conn" 
    ]

    process = subprocess.Popen(cmd,stdout=temp, stderr=err)
    process.wait()
    conn_log_file = '../zeek/logs/conn.log'

    df_gt = pd.read_csv(conn_log_file, sep='\t', comment='#', low_memory=False)
    cols = df_gt.columns.tolist()

    cols[0] = 'start_time'
    cols[2] = 'src_ip'
    cols[3] = 'src_port'
    cols[4] = 'dest_ip'
    cols[5] = 'dest_port'
    cols[6] = 'proto'
    df_gt.columns = cols

    df_gt = df_gt[["src_ip", "src_port", "dest_ip", "dest_port", "proto", "start_time"]]
    df_gt["start_time"] = df_gt["start_time"].round().astype(int)
    df_gt['flow_alerted'] = (df_gt['start_time'] >= timestamp_start) & (df_gt['start_time'] <= timestamp_end)



    df_merged = pd.merge(df_gt, df_snort, how='left', on=['src_ip', 'dest_ip', 'src_port', 'dest_port', 'proto', 'start_time'],suffixes=('_gt', '_snort'))
    df_merged['flow_alerted_snort'] = df_merged['flow_alerted_snort'].fillna(False)

    df_gt.to_csv("./tmp/df_gt.csv", index=False)
    df_snort.to_csv("./tmp/df_snort.csv", index=False)
    df_merged.to_csv("./tmp/df_merged.csv", index=False)

    df_tp = df_merged[(df_merged["flow_alerted_gt"] == True) & (df_merged["flow_alerted_snort"] == True)]
    df_tn = df_merged[(df_merged["flow_alerted_gt"] == False) & (df_merged["flow_alerted_snort"] == False)]
    df_fp = df_merged[(df_merged["flow_alerted_gt"] == False) & (df_merged["flow_alerted_snort"] == True)]
    df_fn = df_merged[(df_merged["flow_alerted_gt"] == True) & (df_merged["flow_alerted_snort"] == False)]
    
    tot_true_pos = tot_false_pos = tot_false_neg = tot_true_neg = 0

    tot_true_pos += len(df_tp)
    tot_false_pos += len(df_fp)
    tot_false_neg += len(df_fn)
    tot_true_neg += len(df_tn)

    return(tot_true_pos, tot_false_pos,tot_false_neg,tot_true_neg, False)
