import os
import pandas as pd
from datetime import datetime
from pathlib import Path

def process_zeek_logs_BOTIOT(pcap_file):
    pd.set_option('future.no_silent_downcasting', True)

    pcap_folder_to_gt_map = {
        "../datasets/BOT-IOT/pcap/DDoS/DDoS_HTTP": "../datasets/BOT-IOT/ground_truth/DDoS_HTTP.csv",
        "../datasets/BOT-IOT/pcap/DDoS/DDoS_UDP": "../datasets/BOT-IOT/ground_truth/DDoS_UDP.csv",
        "../datasets/BOT-IOT/pcap/DDoS/DDoS_TCP": "../datasets/BOT-IOT/ground_truth/DDoS_TCP.csv",
        "../datasets/BOT-IOT/pcap/DoS/DoS_HTTP": "../datasets/BOT-IOT/ground_truth/DoS_HTTP.csv",
        "../datasets/BOT-IOT/pcap/DoS/DoS_UDP": "../datasets/BOT-IOT/ground_truth/DoS_UDP.csv",
        "../datasets/BOT-IOT/pcap/DoS/DoS_TCP": "../datasets/BOT-IOT/ground_truth/DoS_TCP.csv",
        "../datasets/BOT-IOT/pcap/Scan/Service": "../datasets/BOT-IOT/ground_truth/Service_Scan.csv",
        "../datasets/BOT-IOT/pcap/Scan/OS/1": "../datasets/BOT-IOT/ground_truth/OS_Scan.csv",
        "../datasets/BOT-IOT/pcap/Scan/OS/2": "../datasets/BOT-IOT/ground_truth/OS_Scan.csv",
        "../datasets/BOT-IOT/pcap/Scan/OS/3": "../datasets/BOT-IOT/ground_truth/OS_Scan.csv",
        "../datasets/BOT-IOT/pcap/Scan/OS/4": "../datasets/BOT-IOT/ground_truth/OS_Scan.csv",
        "../datasets/BOT-IOT/pcap/Theft/Data_Exfiltration": "../datasets/BOT-IOT/ground_truth/Data_exfiltration.csv",
        "../datasets/BOT-IOT/pcap/Theft/Keylogging": "../datasets/BOT-IOT/ground_truth/Keylogging.csv",
    }

    pcap_path = Path(pcap_file).resolve()

    gt_path = None
    for folder, gt in pcap_folder_to_gt_map.items():
        folder_path = Path(folder).resolve()
        if folder_path in pcap_path.parents: 
            gt_path = gt
            break

    if gt_path:
        df_gt = pd.read_csv(gt_path)  
    else:
        print(f"No ground truth found for PCAP: {pcap_file}")
 
    df_gt.rename(columns={
        "saddr": "src_ip",
        "sport": "src_port",
        "daddr": "dest_ip",
        "dport": "dest_port",
        "stime" : "start_time",
        "attack": "flow_alerted",
    }, inplace=True)
    df_gt["src_port"] = pd.to_numeric(df_gt["src_port"], errors='coerce').astype("Int64")
    df_gt["dest_port"] = pd.to_numeric(df_gt["dest_port"], errors='coerce').astype("Int64")
    df_gt["start_time"] = pd.to_numeric(df_gt["start_time"], errors='coerce').astype(int)


    notice_log_file = './logs/notice.log'
    conn_log_file = './logs/conn.log'

    if not os.path.exists(conn_log_file and notice_log_file):
        print(f"No alerts generated by zeek")
        return(0,0,0,0,True)
    
    required_columns = {"id.orig_h", "id.orig_p", "id.resp_h", "id.resp_p", "proto"}

    df_notice = pd.read_json(notice_log_file, lines=True)

    if not required_columns.issubset(df_notice.columns):
        return (0, 0, 0, 0, True)

    df_notice.rename(columns={
        "id.orig_h": "src_ip",
        "id.orig_p": "src_port",
        "id.resp_h": "dest_ip",
        "id.resp_p": "dest_port",
    }, inplace=True)

    df_notice = df_notice[["src_ip", "src_port", "dest_ip", "dest_port", "proto"]]
    df_notice["flow_alerted"] = True 


    df_conn = pd.read_json(conn_log_file, lines=True)

    df_conn.rename(columns={
        "ts": "start_time",
        "id.orig_h": "src_ip",
        "id.orig_p": "src_port",
        "id.resp_h": "dest_ip",
        "id.resp_p": "dest_port",
    }, inplace=True)

    df_conn = df_conn[["src_ip", "src_port", "dest_ip", "dest_port", "proto", "start_time"]]

    df_zeek = pd.merge(df_conn, df_notice, how='left', on=['src_ip', 'dest_ip', 'src_port', 'dest_port', 'proto'])
    df_zeek = df_zeek.drop_duplicates(subset=["src_ip", "src_port", "dest_ip", "dest_port", "proto", "start_time"])

    df_zeek['flow_alerted'] = df_zeek['flow_alerted'].fillna(False)
    df_zeek["start_time"] = df_zeek["start_time"].astype(int)


    df_merged = pd.merge(df_gt, df_zeek, how='inner', on=['src_ip', 'dest_ip', 'src_port', 'dest_port', 'proto', 'start_time'],suffixes=('_gt', '_zeek'))
    df_merged['flow_alerted_zeek'] = df_merged['flow_alerted_zeek'].fillna(False)

    df_gt.to_csv("./tmp/df_gt.csv")
    df_zeek.to_csv("./tmp/df_zeek.csv")
    df_merged.to_csv("./tmp/df_merged.csv")



    df_tp = df_merged[(df_merged["flow_alerted_gt"] == True) & (df_merged["flow_alerted_zeek"] == True)]
    df_tn = df_merged[(df_merged["flow_alerted_gt"] == False) & (df_merged["flow_alerted_zeek"] == False)]
    df_fp = df_merged[(df_merged["flow_alerted_gt"] == False) & (df_merged["flow_alerted_zeek"] == True)]
    df_fn = df_merged[(df_merged["flow_alerted_gt"] == True) & (df_merged["flow_alerted_zeek"] == False)]
    
    tot_true_pos = tot_false_pos = tot_false_neg = tot_true_neg = 0

    tot_true_pos += len(df_tp)
    tot_false_pos += len(df_fp)
    tot_false_neg += len(df_fn)
    tot_true_neg += len(df_tn)

    return(tot_true_pos, tot_false_pos,tot_false_neg,tot_true_neg, False)


