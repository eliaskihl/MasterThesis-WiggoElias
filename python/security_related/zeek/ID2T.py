import pandas as pd    
import os
import xml.etree.ElementTree as ET
from datetime import datetime
import subprocess
from datetime import datetime

def process_zeek_logs_ID2T(): 
    pd.set_option('future.no_silent_downcasting', True)

    notice_log_file = './logs/notice.log'
    conn_log_file = './logs/conn.log'

    if not os.path.exists(conn_log_file and notice_log_file):
        print(f"No alerts generated by zeek")
        return(0,0,0,0,True)
    df_notice = pd.read_json(notice_log_file, lines=True)

    df_notice.rename(columns={
        "id.orig_h": "src_ip",
        "id.orig_p": "src_port",
        "id.resp_h": "dest_ip",
        "id.resp_p": "dest_port",
    }, inplace=True)

    df_notice = df_notice[["src_ip", "src_port", "dest_ip", "dest_port", "proto"]]
    df_notice["flow_alerted"] = True  


    df_conn = pd.read_json(conn_log_file, lines=True)

    df_conn.rename(columns={
        "ts": "start_time",
        "id.orig_h": "src_ip",
        "id.orig_p": "src_port",
        "id.resp_h": "dest_ip",
        "id.resp_p": "dest_port",
    }, inplace=True)

    df_conn = df_conn[["src_ip", "src_port", "dest_ip", "dest_port", "proto", "start_time"]]

    df_zeek = pd.merge(df_conn, df_notice, how='left', on=['src_ip', 'dest_ip', 'src_port', 'dest_port', 'proto'])

    df_zeek['flow_alerted'] = df_zeek['flow_alerted'].fillna(False)
    df_zeek["start_time"] = df_zeek["start_time"].astype(int)
    df_zeek = df_zeek.drop_duplicates(subset=["src_ip", "src_port", "dest_ip", "dest_port", "proto", "start_time"])

    xml_file = '../traffic_generators/id2t/output/smallFlows_output_labels.xml'
    tree = ET.parse(xml_file)
    root = tree.getroot()

    timestamp_start_str = root.find('.//timestamp_start/timestamp_hr').text
    timestamp_end_str = root.find('.//timestamp_end/timestamp_hr').text
    timestamp_start = int(datetime.strptime(timestamp_start_str.split('.')[0], '%Y-%m-%d %H:%M:%S').timestamp() + 3600)
    timestamp_end = int(datetime.strptime(timestamp_end_str.split('.')[0], '%Y-%m-%d %H:%M:%S').timestamp()+ 3600)

    temp = open(f"./tmp/temp.log", "w")
    err = open(f"./tmp/err.log", "w")
    id2t_pcap = 'traffic_generators/id2t/output/smallFlows_output.pcap'
    cmd = [
        "sudo", 
        "docker", 
        "exec", 
        "zeek-container", 
        "bash", 
        "-c",
        f"cd logs && zeek -C -r ../{id2t_pcap} ../usr/local/zeek/share/zeek/base/protocols/conn" 
    ]

    process = subprocess.Popen(cmd,stdout=temp, stderr=err)
    process.wait()
    
    df_gt = pd.read_csv(conn_log_file, sep='\t', comment='#', low_memory=False)
    cols = df_gt.columns.tolist()

    cols[0] = 'start_time'
    cols[2] = 'src_ip'
    cols[3] = 'src_port'
    cols[4] = 'dest_ip'
    cols[5] = 'dest_port'
    cols[6] = 'proto'
    df_gt.columns = cols

    df_gt = df_gt[["src_ip", "src_port", "dest_ip", "dest_port", "proto", "start_time"]]
    df_gt["start_time"] = df_gt["start_time"].astype(int)
    df_gt['flow_alerted'] = (df_gt['start_time'] >= timestamp_start) & (df_gt['start_time'] <= timestamp_end)


    df_merged = pd.merge(df_gt, df_zeek, how='left', on=['src_ip', 'dest_ip', 'src_port', 'dest_port', 'proto', 'start_time'],suffixes=('_gt', '_zeek'))
    df_merged['flow_alerted_zeek'] = df_merged['flow_alerted_zeek'].fillna(False)

    df_gt.to_csv("./tmp/df_gt.csv", index=False)
    df_zeek.to_csv("./tmp/df_zeek.csv", index=False)
    df_merged.to_csv("./tmp/df_merged.csv", index=False)

    df_tp = df_merged[(df_merged["flow_alerted_gt"] == True) & (df_merged["flow_alerted_zeek"] == True)]
    df_tn = df_merged[(df_merged["flow_alerted_gt"] == False) & (df_merged["flow_alerted_zeek"] == False)]
    df_fp = df_merged[(df_merged["flow_alerted_gt"] == False) & (df_merged["flow_alerted_zeek"] == True)]
    df_fn = df_merged[(df_merged["flow_alerted_gt"] == True) & (df_merged["flow_alerted_zeek"] == False)]
    
    tot_true_pos = tot_false_pos = tot_false_neg = tot_true_neg = 0

    tot_true_pos += len(df_tp)
    tot_false_pos += len(df_fp)
    tot_false_neg += len(df_fn)
    tot_true_neg += len(df_tn)

    return(tot_true_pos, tot_false_pos,tot_false_neg,tot_true_neg, False)
