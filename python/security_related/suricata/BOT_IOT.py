import os
import pandas as pd
import subprocess
from datetime import datetime
from pathlib import Path

def process_suricata_logs_BOTIOT(pcap_file):
    pd.set_option('future.no_silent_downcasting', True)

    pcap_folder_to_gt_map = {
        "../datasets/BOT-IOT/pcap/DDoS/DDoS_HTTP": "../datasets/BOT-IOT/ground_truth/DDoS_HTTP.csv",
        "../datasets/BOT-IOT/pcap/DDoS/DDoS_UDP": "../datasets/BOT-IOT/ground_truth/DDoS_UDP.csv",
        "../datasets/BOT-IOT/pcap/DDoS/DDoS_TCP": "../datasets/BOT-IOT/ground_truth/DDoS_TCP.csv",
        "../datasets/BOT-IOT/pcap/DoS/DoS_HTTP": "../datasets/BOT-IOT/ground_truth/DoS_HTTP.csv",
        "../datasets/BOT-IOT/pcap/DoS/DoS_UDP": "../datasets/BOT-IOT/ground_truth/DoS_UDP.csv",
        "../datasets/BOT-IOT/pcap/DoS/DoS_TCP": "../datasets/BOT-IOT/ground_truth/DoS_TCP.csv",
        "../datasets/BOT-IOT/pcap/Scan/Service": "../datasets/BOT-IOT/ground_truth/Service_Scan.csv",
        "../datasets/BOT-IOT/pcap/Scan/OS/1": "../datasets/BOT-IOT/ground_truth/OS_Scan.csv",
        "../datasets/BOT-IOT/pcap/Scan/OS/2": "../datasets/BOT-IOT/ground_truth/OS_Scan.csv",
        "../datasets/BOT-IOT/pcap/Scan/OS/3": "../datasets/BOT-IOT/ground_truth/OS_Scan.csv",
        "../datasets/BOT-IOT/pcap/Scan/OS/4": "../datasets/BOT-IOT/ground_truth/OS_Scan.csv",
        "../datasets/BOT-IOT/pcap/Theft/Data_Exfiltration": "../datasets/BOT-IOT/ground_truth/Data_exfiltration.csv",
        "../datasets/BOT-IOT/pcap/Theft/Keylogging": "../datasets/BOT-IOT/ground_truth/Keylogging.csv",
    }

    pcap_path = Path(pcap_file).resolve()

    gt_path = None
    for folder, gt in pcap_folder_to_gt_map.items():
        folder_path = Path(folder).resolve()
        if folder_path in pcap_path.parents: 
            gt_path = gt
            break

    if gt_path:
        df_gt = pd.read_csv(gt_path)  
    else:
        print(f"No ground truth found for PCAP: {pcap_file}")
 
    df_gt.rename(columns={
        "saddr": "src_ip",
        "sport": "src_port",
        "daddr": "dest_ip",
        "dport": "dest_port",
        "stime" : "start_time",
        "attack": "flow_alerted",
    }, inplace=True)
    df_gt["src_port"] = pd.to_numeric(df_gt["src_port"], errors='coerce').astype("Int64")
    df_gt["dest_port"] = pd.to_numeric(df_gt["dest_port"], errors='coerce').astype("Int64")
    df_gt["start_time"] = pd.to_numeric(df_gt["start_time"], errors='coerce').astype(int)


    log_file = './logs/eve.json'
    if not os.path.exists(log_file):
        print(f"No alerts generated by Suricata")
        return(0,0,0,0,True)
    
    df_suricata = pd.read_json(log_file, lines=True)
    
    df_suricata = df_suricata[df_suricata['event_type'] == 'flow']
    df_suricata["flow_alerted"] = df_suricata["flow"].apply(lambda x: x.get("alerted", False) if isinstance(x, dict) else False)
    df_suricata['start_time'] = df_suricata['flow'].apply(lambda x: x.get('start') if isinstance(x, dict) else None)
    df_suricata['start_time'] = df_suricata['start_time'].apply(lambda x: int(datetime.strptime(x[:19], '%Y-%m-%dT%H:%M:%S').timestamp() + 7200) if pd.notnull(x) else None)

    df_suricata = df_suricata[['src_ip', 'src_port', 'dest_ip', 'dest_port', 'proto','start_time', 'flow_alerted']]  # Keep only necessary columns
    df_suricata['proto'] = df_suricata['proto'].str.lower()
    df_suricata["src_port"] = pd.to_numeric(df_suricata["src_port"], errors="coerce").astype("Int64")
    df_suricata["dest_port"] = pd.to_numeric(df_suricata["dest_port"], errors="coerce").astype("Int64")

    temp = open(f"./tmp/temp.log", "w")
    err = open(f"./tmp/err.log", "w")
    cmd = [
        "sudo", 
        "docker", 
        "exec", 
        "zeek-container", 
        "bash", 
        "-c",
        f"cd logs && zeek -C -r ../{pcap_file} ../usr/local/zeek/share/zeek/base/protocols/conn" 
    ]

    process = subprocess.Popen(cmd,stdout=temp, stderr=err)
    process.wait()
    zeek_flows = '../zeek/logs/conn.log'


    df_zeek_flows = pd.read_csv(zeek_flows, sep='\t', comment='#', low_memory=False)
    cols = df_zeek_flows.columns.tolist()

    cols[0] = 'start_time'
    cols[2] = 'src_ip'
    cols[3] = 'src_port'
    cols[4] = 'dest_ip'
    cols[5] = 'dest_port'
    cols[6] = 'proto'
    df_zeek_flows.columns = cols

    df_zeek_flows = df_zeek_flows[["src_ip", "src_port", "dest_ip", "dest_port", "proto", "start_time"]]
    df_zeek_flows["start_time"] = df_zeek_flows["start_time"].astype(int)
    df_suricata = pd.merge(df_zeek_flows, df_suricata, how='left', on=['src_ip','src_port','dest_ip','dest_port','proto', 'start_time'],suffixes=('_zeek_flows', '_suricata'))

    df_merged = pd.merge(df_gt, df_suricata, how='inner', on=['src_ip', 'dest_ip', 'src_port', 'dest_port', 'proto', 'start_time'],suffixes=('_gt', '_suricata'))
    df_merged['flow_alerted_suricata'] = df_merged['flow_alerted_suricata'].fillna(False)

    df_gt.to_csv("./tmp/df_gt.csv")
    df_suricata.to_csv("./tmp/df_suricata.csv")
    df_merged.to_csv("./tmp/df_merged.csv")

    df_tp = df_merged[(df_merged["flow_alerted_gt"] == True) & (df_merged["flow_alerted_suricata"] == True)]
    df_tn = df_merged[(df_merged["flow_alerted_gt"] == False) & (df_merged["flow_alerted_suricata"] == False)]
    df_fp = df_merged[(df_merged["flow_alerted_gt"] == False) & (df_merged["flow_alerted_suricata"] == True)]
    df_fn = df_merged[(df_merged["flow_alerted_gt"] == True) & (df_merged["flow_alerted_suricata"] == False)]
    
    tot_true_pos = tot_false_pos = tot_false_neg = tot_true_neg = 0

    tot_true_pos += len(df_tp)
    tot_false_pos += len(df_fp)
    tot_false_neg += len(df_fn)
    tot_true_neg += len(df_tn)

    return(tot_true_pos, tot_false_pos,tot_false_neg,tot_true_neg, False)


